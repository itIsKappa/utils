#! /usr/bin/python3

import pickle
import readline, colorama
import os
from sys import argv
from math import log10


class BkMk:
  '''A class of methods to manage the system-wide index of document
  bookmarks.'''
  
  def __init__(self, library: str):
    self.lib = library

  def textcolor(self, txt: str, clr: str):
    colors = {
      1: colorama.Fore.BLUE,
      2: colorama.Fore.RED,
      3: colorama.Fore.GREEN,
      4: colorama.Fore.MAGENTA,
      5: colorama.Fore.CYAN
    }
    return f"{colors[clr]}{txt}{colorama.Fore.RESET}"

  def show_error(self, msg: str):
    print(" ¯\_(•_•)_/¯  " + msg)

  def add(self, bk: str, pg: int):
    '''Add an entry into the index.'''
    
    try:
      with open(self.index, 'rb') as f:
        lib = pickle.load(f)
    except FileNotFoundError:
        lib = []

    for i in range(len(lib)):
      if i != lib[i][0]:
        no = i
        break
    else:
      no = len(lib)
    rec = [no, bk, pg]

    lib.append(rec)
    lib.sort()

    with open(self.index, 'wb') as f:
      pickle.dump(lib, f)

    print(self.textcolor("Added:", 3),
          f"‘{bk}’ pp.{pg}")
  
  def update(self, bkn: int, new_pg: int):
    '''Update the page number of an existing index.'''
    
    try: bkn = int(bkn)
    except ValueError:
      self.show_error(f"Are you sure ‘{bkn}’ is an integer?")
      return

    with open(self.index, 'rb') as f:
      lib = pickle.load(f)

    for i in range(len(lib)):
      if lib[i][0] == bkn:
        old_pg = lib[i][2]
        lib[i][2] = new_pg
        bk_nm = lib[i][1]  # To display the updated bookmark
        break
    else:
      self.show_error("It seems you don’t have such a bookmark.")
      return
    
    with open(self.index, 'wb') as f:
      pickle.dump(lib, f)

    print(f"‘{bk_nm}’: {old_pg} ⇒",
          self.textcolor(new_pg, 1))
  
  def view(self):
    '''View the book names and their corresponding bookmark.'''

    with open(self.index, 'rb') as f:
      lib = pickle.load(f)

    mbl = max([len(x) for _, x, _ in lib])
    # max_bknm_len ([m]aximum [b]ook name [l]ength) specifies the amount of space
    # reserved for the book names in the table.

    print(f"┌─────┬─{'─'  * mbl}─┬─{     '─' *12    }─┐")
    print(f"│ {'#  '} │ {'Name':{mbl}} │ {'Page number':12} │")
    print(f"├─────┼─{'─'  * mbl}─┼─{     '─' *12    }─┤")
    for no, bknm, pg in lib:
      print(f"│ {no:3} │ {bknm:{mbl}} │ {pg:12} │") 
    print(f"└─────┴─{'─'  * mbl}─┴─{     '─' *12    }─┘")

  def remove(self, bkn: str):
    '''Remove the specified index.'''

    try: bkn = int(bkn)
    except ValueError:
      self.show_error(f"Are you sure ‘{bkn}’ is an integer?")

    with open(self.index, 'rb') as f:
      lib = pickle.load(f)

    for i in range(len(lib)):
      if lib[i][0] == bkn:
        bk_nm = lib.pop(i)[1]  # To display the removed bookmark
        break
    else:
      self.show_error("It seems you don’t have such a bookmark.")
      return
    
    with open(self.index, 'wb') as f:
      pickle.dump(lib, f)

    print(self.textcolor("Removed:", 2),
          f"‘{bk_nm}’")


class Run(BkMk):
  '''A set of methods for user interactions, input parsing, output
  formatting, and the likes.'''

  def __init__(self, argv: list[str]):
    self.args = argv[1:]
    self.verbs = {
      # Long-form verbs
         "add": self.add,
      "update": self.update,
        "view": self.view,
      "remove": self.remove,
        "help": self.help,
      # Short-form verbs
        'a': self.add,
        'u': self.update,
        'v': self.view,
        'r': self.remove,
        'h': self.help
    }

    self.home = "/home/ali"
    self.index = f"{self.home}/.bkmk/index.bin"
    if not os.path.exists(f"{self.home}/.bkmk"):
      os.mkdir(f"{self.home}/.bkmk")    

  def help(self):
    '''Present help to the user.'''

    print(
      "The following verbs are valid:\n",
      "• add <book name> <page number>         Add a bookmark\n",
      "• update <book name> <new page number>  Update a bookmark\n",
      "• view                                  View your bookmarks\n",
      "• remove <book name>                    Remove a bookmark\n",
      "• help                                  Display this message"
      )
  
  def parse(self):
    '''Parse the input and run the corresponding functions.'''

    try:
      self.verbs[self.args[0]](*self.args[1:])
    except KeyError:
      self.show_error(f"‘{self.args[0]}’ is a strange verb."
        "  Type ‘help’ for help.")
    except IndexError:
      self.view()
    except TypeError: 
      self.show_error("Something’s missing."
        "  You could type ‘help’ and read up on the verb.")


if __name__ == "__main__":
  Run(argv).parse()
