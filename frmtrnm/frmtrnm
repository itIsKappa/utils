#! /bin/python3

# Declaring the file to be not importable.
assert __name__ == "__main__", "Not a module"

# Imports.
from sys import argv
from os import rename
from os.path import exists
from getopt import gnu_getopt, GetoptError

# Definition for colours.
ANSI_RED = "\x1b[31m"
ANSI_GREEN = "\x1b[32m"
ANSI_BLUE = "\x1b[36m"
ANSI_RESET = "\x1b[39m"

# Help.
prog_name = argv[0].split('/')[-1]
def help__() -> None:
    indent = ' ' * len(prog_name)
    logo = f"{ANSI_BLUE}  ___ ___ __  __ _____ ___ _  _ __  __ \n" \
                      f" | __| _ \  \/  |_   _| _ \ \| |  \/  |\n" \
                      f" | _||   / |\/| | | | |   / .` | |\/| |\n" \
                      f" |_| |_|_\_|  |_| |_| |_|_\_|\_|_|  |_|{ANSI_RESET}\n"
    print(logo, f"\nUsage:\n{prog_name} [-d <delimiter> | --delimiter=<delimiter>]\n\
                    Set the delimiter; the default is a hyphen.\n" \
                  f"{indent} [-s | --show]\n\
                    Display the set of characters that will be replaced.\n" \
                  f"{indent} [-a <string of characters> | --add=<string of characters>]\n\
                    Add characters to be replaced to the set.\n" \
                  f"{indent} [-r <string of characters> | --remove=<string of characters>]\n\
                    Remove characters to be replaced from the set.\n" \
                  f"{indent} [-R <string of characters> | --redefine=<string of characters>]\n\
                    Replace all the characters to be replaced.\n" \
                  f"{indent} [-x | --ignore-extension]\n\
                    Ignores the file extension. By default, it is left untouched.\n" \
                  f"{indent} [-h | --help]\n\
                    Displays this.\n" \
                  f"{indent} [-l <value> | --min-cluster-limit=<value>]\n\
                    Sets the minimum count of delimiters in a cluster.\n" \
                  f"{indent} [-L <value> | --max-cluster-limit=<value>]\n\
                    Sets the maximum count of delimites in a cluster.")
    print("\nNotes: \nHere delimiter refers to that which is to be replaced with.")
    exit()

# Pre-emptive checking.
if len(argv) < 2: help__()

# Definitions.
delim = '-' # Default delimiter.
bad_chars: set[str] = {
    # Characters to be replaced.
    '(', ')',
    '[', ']',
    '{', '}',
    ' ', '&',
    '!', '$',
    '*', '^',
    ';', '=',
    '~', '\'',
    '"', '`',
    '\\', '|',
    '?', '<', '>'
}
ign_ext = False # Ignore extensions?

cluster_min_max: list[tuple[bool, int]] = [
    # Zero is a place-holder value.
    (False, 0), # Minimum.
    (False, 0)  # Maximum.
] # The booleans represent whether to consider the subsequent value.

def cluster_managing(arg: str) -> str:
    """Manages the minimum and maximum length of delimiter clusters in filenames."""

    to_mng_lst: list[str] = [''] # A new list to manage clusters.
    prev_was_delim = True        # Was the previous a delimiter?

    for e in arg:
        if e == delim:
            if prev_was_delim: to_mng_lst[-1] += delim
            else: to_mng_lst.append(delim)
            prev_was_delim = True
        else:
            if prev_was_delim: to_mng_lst.append(e)
            else: to_mng_lst[-1] += e
            prev_was_delim = False
    if to_mng_lst[0] == '': to_mng_lst.pop(0)

    # It is only necessary to traverse with steppings of two.
    # This is from the very nature of delimiters.
    # Below determines where to begin the traversal, whether
    # from index 0 or 1 with XOR.
    index = 1 ^ (to_mng_lst[0][0] == delim)

    while index < len(to_mng_lst):
        # Minimum cluster size.
        if cluster_min_max[0][0] and to_mng_lst[index].count(delim) < \
           (limit := cluster_min_max[0][1]):
            to_mng_lst[index] = delim * limit
        # Maximum cluster size.
        if cluster_min_max[1][0] and to_mng_lst[index].count(delim) > \
           (limit := cluster_min_max[1][1]):
            to_mng_lst[index] = delim * limit
        # Double stepping.
        index += 2

    return str().join(to_mng_lst)


def formatting(arg: str) -> str:
    """The filename formatter."""

    ext = str()
    has_ext = False
    if not ign_ext:
        has_ext = '.' in arg
        if has_ext:
            try: arg, ext = arg.split('.')
            except ValueError:
                *arg, ext = arg.split('.')
                arg = '.'.join(arg)

    arg = list(arg)
    # bad_char replacement.
    for i in range(len(arg)):
        if arg[i] in bad_chars: arg[i] = delim
    # Cluster management.
    arg = cluster_managing(arg)

    return str().join(arg).strip(delim) \
           if not has_ext else \
           str().join(arg).strip(delim) + '.' + ext

# Option parsing.
try:
    opts, args = gnu_getopt(
                 argv[1:],
                 # Short options.
                 "d:sa:r:R:l:L:hx",
                 # Long options.
                 ["delimiter=",
                  "show",
                  "add=",
                  "remove=",
                  "redefine=",
                  "min-cluster-limit=",
                  "max-cluster-limit=",
                  "ignore-extension",
                  "help"
                 ])
except GetoptError as getopt_error:
    exit(f"<{ANSI_RED}!{ANSI_RESET}> Erroneous option: '{getopt_error.opt}'.")

if not opts == []:
    for opt, val in opts:
        if opt == "-d" or opt == "--delimiter":
            delim = val
        elif opt == "-s" or opt == "--show":
            exit(f"<{ANSI_GREEN}+{ANSI_RESET}> {str().join(bad_chars)}")
        elif opt == "-a" or opt == "--add":
            bad_chars |= set(val)
        elif opt == "-r" or opt == "--remove":
            bad_chars -= set(val)
        elif opt == "-R" or opt == "--redefine":
            bad_chars = set(val)
        elif opt == "-l" or opt == "--min-cluster-limit":
            try: cluster_min_max[0] = True, int(val)
            except ValueError: exit("Minimum limit must be an integer.")
        elif opt == "-L" or opt == "--max-cluster-limit":
            try: cluster_min_max[1] = True, int(val)
            except ValueError: exit("Maximum limit must be an integer.")
        elif opt == "-x" or opt == "--ignore-extension":
            ign_ext = True
        elif opt == "-h" or opt == "--help":
            help__()

# Formatting.
selected_cnt = 0 # The count of the selected files.
renamed_cnt  = 0 # The count of the successfully renamed files.

for arg in args:
    src_arg = arg # Source copy of the argument.
    selected_cnt += 1

    if '/' in arg:
        *dirs, arg = arg.split('/')
        arg = formatting(arg)
        arg = ('/').join(dirs) + '/' + arg
    else: arg = formatting(arg)

    # Renaming.
    if src_arg == arg: # Checking for unchanged filenames.
        print(f"<{ANSI_GREEN}+{ANSI_RESET}> No formatting could be done ({src_arg}). Renaming skipped.")
        continue
    elif exists(arg): # Checking filename coincidences.
        consent = True \
                  if input(f"<{ANSI_RED}!{ANSI_RESET}> The formatted filename ('{src_arg}') coincides" \
                           "with another filename ('{arg}'). Continue (yes/no)? ") == "yes" \
                  else False
        if consent: print(f"<{ANSI_GREEN}+{ANSI_RESET}> Consent report: {ANSI_GREEN}Positive{ANSI_RESET}.")
        else:
            print(f"<{ANSI_GREEN}+{ANSI_RESET}> Consent report: {ANSI_RED}Negative{ANSI_RESET}.\n" \
                  f"<{ANSI_RED}!{ANSI_RESET}> Renaming skipped.")
            continue

    try:
        rename(src_arg, arg)
        renamed_cnt += 1
    except FileNotFoundError:
        print(f"<{ANSI_RED}!{ANSI_RESET}> The file does not exist ('{src_arg}').")
        continue
    except PermissionError:
        print(f"<{ANSI_RED}!{ANSI_RESET}> Insufficient privileges to rename the file ('{src_arg}').")
        continue

    # Report for renaming.
    print(f"<{ANSI_GREEN}+{ANSI_RESET}> '{src_arg}' {ANSI_BLUE}to{ANSI_RESET} '{arg}'")

# Statistics.
skipped_cnt = selected_cnt - renamed_cnt
print(f"{selected_cnt} selected; " \
      f"{ANSI_GREEN if renamed_cnt != 0 else ANSI_RESET}{renamed_cnt}{ANSI_RESET} renamed; " \
      f"{ANSI_RED if skipped_cnt != 0 else ANSI_RESET}{skipped_cnt}{ANSI_RESET} skipped.")

# Adieu.
exit()
