#! /usr/bin/python3

# Error codes:
# 1: name error
# 2: file not found
# 3: invalid option
# 4: value error
# 5: non-existent child

from sys import argv, stdin
from getopt import gnu_getopt, GetoptError

class TreeFuncts:
    '''A class containing methods associated with trees.  If the methods are to
    be manually used, it must be learned that the trees are of the form:
        tree = [str, tree, tree, ..., tree]
    The 0th element is the parent and the rest are children.  A parent can have
    by definition an indefinite number of children.'''

    def __init__(self, utf8=True):
        # Tree connections
        if utf8:
            self.con_1 = "│"
            self.con_2 = "└─"
            self.con_3 = "├─"
        else:
            self.con_1 = "|"
            self.con_2 = "`-"
            self.con_3 = "|-"

    def cktree(self, tree: list, prefix: str, ultimate: bool) -> str:
        '''Cooks a readable string of the tree with line-drawing characters If
        this method is to be called manually, as accomodations for being
        recursive method, <prefix> must be an empty str and <ultimate> must be
        True.  <tree> will be the tree to be cooked.'''

        stream = str()
        stream += prefix[3:] + tree[0] + '\n'

        for i in range(1, tr_len := len(tree)):
            is_ultimate = i == tr_len - 1
            stream += self.cktree(tree[i],
                                  prefix[:-3]                       +
                                  (' ' if ultimate else self.con_1) + \
                                  ' ' * 2                           + \
                                  (self.con_2 if is_ultimate          \
                                              else self.con_3)      + \
                                  ' ',
                                  is_ultimate)

        return stream

    def mktree(self, stream: str, indent: str, indbegc: int) -> list:
        '''Makes a list-tree structure from an indented str stream If this
        method is to be called manually, <indbegc> is the count of indentations
        for the grandparent.  <stream> is str stream and <indent> is the
        indentation string employed.'''

        stream: list = stream.split('\n')
        stream.reverse()

        def __mktree__(stream: str, indent: str, indbegc: int) -> list:
            tree = []
            chkp = 0  # Checkpoint
            for i in range(len(stream)):
                if stream[i].count(indent) == indbegc:
                    tree.append([stream[i].lstrip(indent)])
                    try:
                        tree[-1].extend(__mktree__(stream[chkp:i], indent,
                                                   indbegc + 1)[::-1])
                        # This implies the parent posseses no child.
                    except TypeError: pass
                    chkp = i + 1

            return tree

        return __mktree__(stream, indent, indbegc)


def main():
    # Default configuration
    charset_utf8 = True
    read_stdin = False
    list_input = False

    indent = "  "
    indbegc = 0
    child = 0

    view_tree = False

    # Option parsing
    try:
        opts, args = gnu_getopt(
                     argv[1:],
                     # Short options
                     "ailf:n:b:c:t",
                     # Long options
                     ["ascii",
                      "stdin",
                      "list",
                      "file=",
                      "indent=",
                      "beginning-indent-count=",
                      "child=",
                      "view-tree"
                     ])
    except GetoptError as getopt_error:
        print(f"invalid option: '{getopt_error.opt}'")
        exit(3)

    if not opts == []:
        for opt, val in opts:
            if opt == "-a" or opt == "--ascii":
                charset_utf8 = False
            elif opt == "-i" or opt == "--stdin":
                read_stdin = True
            elif opt == "-l" or opt == "--list":
                list_input = True
            elif opt == "-f" or opt == "--file":
                read_file = val
            elif opt == "-n" or opt == "--indent":
                indent = val
            elif opt == "-b" or opt == "--beginning-indent-count":
                try: indbegc = int(val)
                except ValueError:
                    print(f"value error: {opt}: {val}")
                    exit(4)
            elif opt == "-c" or opt == "--child":
                try: child = int(val)
                except ValueError:
                    print(f"value error: {opt}: {val}")
                    exit(4)
            elif opt == "-t" or opt == "--view-tree":
                view_tree = True

    # .read()[:-1] is to remove the trailing newline.
    if not read_stdin:
        try:
            with open(read_file, 'r') as f: stream = f.read()[:-1]
        except FileNotFoundError:
            print(f"file not found: '{read_file}'")
            exit(2)
        except NameError:
            print("--stdin or --file is necessary.")
            exit(1)
    else: stream = stdin.read()[:-1]

    # Tree making and cooking
    tf_inst = TreeFuncts(utf8=charset_utf8)
    if list_input: tree = eval(stream)
    else: tree = tf_inst.mktree(stream, indent, indbegc)

    # Here, as above, [:-1] is to remove the trailing newline.
    if view_tree: print(tree)
    else:
        try: print(tf_inst.cktree(tree[child], '', True)[:-1])
        except IndexError:
            print(f"non-existent child: {child}")
            exit(5)
    exit(0)


if __name__ == "__main__": main()
